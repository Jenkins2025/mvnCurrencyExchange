pipeline {
      agent any
    //agent {docker {image 'maven:3.6.3'}}

    environment {
		dockerHome = tool 'myDocker'
		mavenHome = tool 'myMaven4'
		PATH = "$dockerHome/bin:$mavenHome/bin:$PATH"
	}

	stages {
		stage('Checkout') {
			steps {
				sh 'mvn --version'
				sh 'docker version'
				echo "Build"
				echo "PATH - $PATH"
				echo "BUILD_NUMBER - $env.BUILD_NUMBER"
				echo "BUILD_ID - $env.BUILD_ID"
				echo "JOB_NAME - $env.JOB_NAME"
				echo "BUILD_TAG - $env.BUILD_TAG"
				echo "BUILD_URL - $env.BUILD_URL"
			}
		}

		stage('Compile') {
			steps {
				sh "mvn clean package"
			}
		}

        stage("build & SonarQube analysis") {
            agent any
            steps {
              withSonarQubeEnv('SonarQube') {
                sh 'mvn clean package sonar:sonar'
              }
            }
          }


       stage ('Test') {
            steps {
                sh "mvn test"
            }
        }

        stage ('Integrated Test') {
            steps {
                sh "mvn failsafe:integration-test failsafe:verify"
            }

        }

        stage('Build Docker Image') {
			steps {
				//"docker build -t in28min/currency-exchange-devops:$env.BUILD_TAG"
				script {
					dockerImage = docker.build("in28min/currency-exchange-devops:${env.BUILD_TAG}")
				}

			}
		}

        stage('Push Docker Image') {
			steps {
				script {
					docker.withRegistry('', 'dockerhubregistrydockerloginandpwd') {
						dockerImage.push();
						dockerImage.push('latest');
					}
				}
			}
		}

     }
      
      post    {

            always {
                echo 'Im awesome.I rum alwys'
            }

            success {
                echo 'I run whenever you are successfule Eghosa'
            }

            failure {
                echo 'Im absent whenever you fail your exam'
            }
        }


}